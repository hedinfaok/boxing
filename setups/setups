#!/usr/bin/env bash

set -euo pipefail

SETUPS_SOURCE="$(readlink -f "$0")"
SETUPS_HOME=${SETUPS_HOME:-"$HOME/setups"}

setups_prepare(){
  SETUPS_BUILTINS=$(_setup_flags)
  source_dir "$SETUPS_HOME"/preload.d
  source_dir "$SETUPS_HOME"/plugins.d
  source_dir "$SETUPS_HOME"/setups.d
  setups "$@"
}

# Flags
SETUPS_FORCE=""

# USAGE: setups [name] ... [name]
setups(){
  if [ -n "${DEBUG:-}" ]; then set -x; fi

  local skip_options=""
  for i in "${@}"; do
    case "$i" in
      --)
        skip_options="true"
        ;;
      --*)
        [ -z "$skip_options" ] && "setup_$i" "$@"
        ;;
      *)
        printf "Running setups for %s ...\n\n" "$i"
        "setup_$i" "$@"
        ;;
    esac
  done

  if [ -n "${DEBUG:-}" ];then set +x; fi
}

source_dir(){
  dir="${1:-"$SETUPS_HOME"/setups.d}"
  fnmatch="${2:-*.sh}"

  if [ -d "$dir" ]; then
    for i in $dir/$fnmatch; do
      if [ -r "$i" ]; then
        # shellcheck source=/dev/null
        . "$i"
      fi
    done
    unset i
  else
    mkdir -p "$dir" 2>/dev/null
  fi
  unset dir fnmatch
}

# Wrap sudo to allow running setups as root user when sudo is in the script
sudo(){
  if [ "$(id -u)" -ne 0 ]; then
    /usr/bin/sudo "$@"
  else
    "$@"
  fi
}

# Return true if file exists, false otherwise.
# Skips check and returns false if setups --force flag is set.
creates(){
  [ -z "$SETUPS_FORCE" ] && [ -f "$1" ]
}

# Run setup_* if command not found
needs(){
  for i in "$@"; do
    command -v "$i" >/dev/null || setup_"$i"
  done
}

#
## Internal functions
#
setup_--help(){
cat <<HEREDOC
Usage: setups [options] name [name ...]

Built-in options:
$SETUPS_BUILTINS

Plugin options:
$( _setup_list_plugins | grep . || printf "no plugins\n")

Environment: SETUPS_HOME=$SETUPS_HOME
Source: $SETUPS_SOURCE
HEREDOC
}

# Print plugin options, one per line
_setup_list_plugins(){
  local grep_opts

  for ignore in $SETUPS_BUILTINS; do
    grep_opts+=(-e); grep_opts+=($ignore)
  done
  _setup_flags | grep -vF "${grep_opts[@]}"
}

setup_--version(){
  printf "%s.%s.%s-%s\n" 1 1 0 dumbledore
  setup_--checksum
}

setup_--checksum(){
  printf "checksum (SHA256): %s\n" "$(sha256sum "$BASH_SOURCE" | cut -d' ' -f1)"
}

# List sourced functions that start with "setup_--"
_setup_flags(){
  declare -F \
    | grep '^declare -f setup_--' \
    | cut -d' ' -f3 \
    | cut -d_ -f2-
}

# List sourced functions that start with "setup_"
setup_--list(){
  declare -F \
    | grep '^declare -f setup_' \
    | grep -v -e '^declare -f setup_--' -e '^declare -f setup__--' \
    | cut -d' ' -f3 \
    | cut -d_ -f2-
}

# Load additional sources for setups
setup_--source(){
  shift; source "$1"; shift
  setups "$@"
  exit $?
}

# Load additional sources for setups from a directory
setup_--source-dir(){
  shift; source_dir "$1"; shift
  setups "$@"
  exit $?
}

setup_--force(){
  SETUPS_FORCE="--force"
}

setup_--readme(){
cat <<HEREDOC
Setups is a simple bash utility that sources files matching ~/setups.d/*.sh
and runs shell functions that match setup_<name>.

Getting started is easy. Define the following shell functions in
~/setups.d/hello-world.sh:

function setup_hello() { printf "Hello"; }
function setup_world() { printf "World"; }

Then in your terminal, run the following command:

$ setups hello world

Setups will run setup_hello and setup_world. Yay!

Setups provides a convention for installing software that may not come from
the system package manager, so you can create repeatable experiences in your
shell.

Here is a more realistic function to setup Homebrew:

function setup_brew(){
  NONINTERACTIVE=1 /bin/bash -c "\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

Now you can run the following to install homebrew:

$ setups brew

Additionally, you can list all defined setups by running setups --list

Setups made my work easier, but don't take my word for it. Try it out today!
HEREDOC
}

setup_setups(){
  url=https://raw.githubusercontent.com/hedinfaok/boxing/main/setups/setups
  tmp_src="${TMPDIR:-/tmp}/setups"
  dst="$SETUPS_HOME/setups"

  printf "Downloading %s from %s\n" setups "$url"
  curl --fail --progress-bar -o "$tmp_src" "$url"
  chmod a+x "$tmp_src"
  printf "Moving from %s to %s\n" "$tmp_src" "$dst"
  mv -f "$tmp_src" "$dst"

  unset url tmp_src dst
}

if [ "$0" == "${BASH_SOURCE[0]}" ]; then setups_prepare "$@"; fi

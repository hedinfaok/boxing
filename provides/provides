#!/bin/sh
set -e

# ============================================================================
# provides - Determine the package that provides a command or filepath
# ============================================================================
# Usage:
#   provides [--help|--version] [--apt|--yum|--apk|--brew|--guix|--pacman|--dnf|--pkg|--nix|--setups] [command|filepath]
#
# Examples:
#   provides --apt python3
#   provides --apt /etc/os-release
#   provides --apt nc
# ============================================================================


# Entry point for provides script
provides() {
  if [ "${DEBUG:-}" ]; then set -x; fi
  for i in "$@"; do
    case "$i" in
      --help)
        provides_help
        exit 0
        ;;
      --version)
        provides_version
        exit 0
        ;;
      --checksum)
        provides_checksum
        exit 0
        ;;
      --*)
        provides_option "$i"
        ;;
      /*)
        provides_filepath "$i"
        ;;
      *)
        provides_bin "$i"
        ;;
    esac
  done
  if [ "${DEBUG:-}" ]; then set +x; fi
  exit 0
}

# Set package manager to --<PACKAGE_MANAGER>
provides_option() {
  opt="$1"
  case "$opt" in
    --apt) PACKAGE_MANAGER=apt ;;
    --setups) PACKAGE_MANAGER=setups ;;
    --pacman) PACKAGE_MANAGER=pacman ;;
    --yum) PACKAGE_MANAGER=yum ;;
    --dnf) PACKAGE_MANAGER=dnf ;;
    --brew) PACKAGE_MANAGER=brew ;;
    --pkg) PACKAGE_MANAGER=pkg ;;
    --apk) PACKAGE_MANAGER=apk ;;
    --guix) PACKAGE_MANAGER=guix ;;
    --nix) PACKAGE_MANAGER=nix ;;
    *) printf "[ERROR] Unknown option: %s\n" "$opt" >&2 ;;
  esac
}

# Print version information
provides_version() {
  printf "%s.%s.%s-%s\n" 1 1 0 redwing
  provides_checksum
}


# Print checksum of this script
provides_checksum() {
  printf "checksum (SHA256): %s\n" "$(sha256sum "$0" | cut -d' ' -f1)"
}


# Print usage information
provides_help() {
  cat <<HEREDOC
provides [--help|--version] [--PACKAGE_MANAGER] [command|filepath]

Determine the package that provides the given command or filepath.

PACKAGE_MANAGER can be one of the following values:
  setups
  apt
  apk
  brew (fallback to 'brew search')
  guix (fallback to 'guix search')
  pacman (pending)
  yum (pending)
  dnf (pending)
  pkg (termux) (pending)
  nix (pending)

PACKAGE_MANAGER can also be declared as an environment variable.

Example: provides --apt python3 /etc/os-release nc
HEREDOC
}

##
# Apt
##

# Ensure apt-file is installed
provides_apt_file() {
  command -v apt-file >/dev/null 2>&1 || {
    sudo apt-get update && sudo apt-get install -y apt-file && sudo apt-file update
  }
}


# Search for filepath using apt
provides_apt_filepath() {
  path="$1"
  provides_apt_file
  sudo apt-file search -x "^${path}$" | head -n1 | cut -d':' -f1
}


# Search for binary in apt
provides_apt_bin() {
  bin=$(provides_apt_alternatives_query "$1")
  provides_apt_file
  sudo apt-file search -x "^/(usr/)?s?bin/${bin}(.default)?$" | cut -d':' -f1
}


# Query apt alternatives for binary
provides_apt_alternatives_query() {
  bin="$1"
  alt=$(update-alternatives --list "$bin" 2>/dev/null)
  if [ -n "$alt" ]; then
    bin=$(basename "$alt")
  fi
  printf "%s" "$bin"
}


# Not yet implemented stub
provides_notyet() {
  printf "[ERROR] Not yet implemented\n" >&2
  return 1
}


# Not supported stub
provides_not_supported() {
  printf "[ERROR] Searching by %s (%s) is not possible with %s.\n" "$@" >&2
  return 1
}

##
# Setups
##

# Setups manager handlers
provides_setups_filepath() {
  provides_not_supported "filepath" "$1" "$PACKAGE_MANAGER"
}
provides_setups_bin() {
  i="$1"
  boxing setups --print "$i"
}

##
# pacman
# see https://archlinux.org/pacman/pacman.8.html#FO
##

provides_pacman_filepath() { provides_notyet; }
provides_pacman_bin() { provides_notyet; }

##
# yum
##

provides_yum_filepath() { provides_notyet; }
provides_yum_bin() { provides_notyet; }

##
# dnf
##

provides_dnf_filepath() { provides_notyet; }
provides_dnf_bin() { provides_notyet; }

##
# brew
##

provides_brew_filepath() {
  provides_not_supported "filepath" "$1" "$PACKAGE_MANAGER"
}
provides_brew_bin() {
  printf "[WARNING] Searching by command (%s) is not possible with brew.\n" "$1"
  printf "Using 'brew search %s'\n" "$1"
  brew search "$1"
}

##
# pkg (termux)
##

provides_pkg_filepath() { provides_notyet; }
provides_pkg_bin() { provides_notyet; }

##
# apk
##

provides_apk_filepath() {
  command -v apk-file >/dev/null 2>&1 || apk add apk-file
  apk-file "$1"
}
provides_apk_bin() {
  apk update
  apk search -xqo "cmd:$1"
}

##
# guix
##

provides_guix_filepath() {
  provides_not_supported "filepath" "$1" "$PACKAGE_MANAGER"
}
provides_guix_bin() {
  provides_not_supported "command" "$1" "$PACKAGE_MANAGER"
  printf "Using 'guix search ^%s'\n" "$1"
  PAGER=cat guix search "^$1"
}

##
# nix
##

provides_nix_filepath() { provides_notyet; }
provides_nix_bin() { provides_notyet; }


# Set default package manager
PACKAGE_MANAGER="${PACKAGE_MANAGER:-apt}"

# Dispatch to correct handler
provides_filepath() {
  case "$PACKAGE_MANAGER" in
    apt) provides_apt_filepath "$1" ;;
    setups) provides_setups_filepath "$1" ;;
    pacman) provides_pacman_filepath "$1" ;;
    yum) provides_yum_filepath "$1" ;;
    dnf) provides_dnf_filepath "$1" ;;
    brew) provides_brew_filepath "$1" ;;
    pkg) provides_pkg_filepath "$1" ;;
    apk) provides_apk_filepath "$1" ;;
    guix) provides_guix_filepath "$1" ;;
    nix) provides_nix_filepath "$1" ;;
    *) provides_not_supported "filepath" "$1" "$PACKAGE_MANAGER" ;;
  esac
}

provides_bin() {
  case "$PACKAGE_MANAGER" in
    apt) provides_apt_bin "$1" ;;
    setups) provides_setups_bin "$1" ;;
    pacman) provides_pacman_bin "$1" ;;
    yum) provides_yum_bin "$1" ;;
    dnf) provides_dnf_bin "$1" ;;
    brew) provides_brew_bin "$1" ;;
    pkg) provides_pkg_bin "$1" ;;
    apk) provides_apk_bin "$1" ;;
    guix) provides_guix_bin "$1" ;;
    nix) provides_nix_bin "$1" ;;
    *) provides_not_supported "command" "$1" "$PACKAGE_MANAGER" ;;
  esac
}

# Wrap sudo to allow running as root user when sudo is in the script
sudo() {
  if [ "$(id -u)" -ne 0 ]; then
    /usr/bin/sudo "$@"
  else
    "$@"
  fi
}

# Main execution pattern
case "$0" in
  */provides) provides "$@" ;;
esac
